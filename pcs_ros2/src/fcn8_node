#!/usr/bin/env python3
'''
 * @file fcn8_node.py
 * @brief This node exposes a service interface to perform FCN8 inference.
 *
 * @author Matthew Powelson
 * @date November 21, 2019
 * @version TODO
 * @bug No known bugs
 *
 * @copyright Copyright (c) 2019, Southwest Research Institute
 *
 * @par License
 * Software License Agreement (Apache License)
 * @par
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * @par
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 '''

import rclpy
from rcl_interfaces.msg import ParameterDescriptor, ParameterType
from cv_bridge import CvBridge
import cv2 as cv
import numpy as np

from pcs_msgs.srv import *
from pcs_detection.inference import Inference

import json
import os

# Hack because code was originally written to have configs as Python modules
class Config:
    def __init__(self, **entries):
        self.__dict__.update(entries)

class InferenceServer(object):
    """
    Creates a ROS service that takes a sensor_msgs/Image and returns a
    sensor_msgs/Image resulting from using FCN8

    One note: rospy service callbacks are in their own thread. This can cause issues. They should have been resolved,
    but I am putting this here in case they pop up again in the future.
    https://stackoverflow.com/questions/46725323/keras-tensorflow-exception-while-predicting-from-multiple-threads
    """
    node = None
    service = None

    def __init__(self, node, filepath, invert_results = False):
        """
        Constructor takes an input filepath to the .h5 wieghts file
        """
        self.node = node
        self.invert_results = invert_results

        # Import Config json file and convert into format we need
        node.get_logger().info('Loading: ' + filepath)
        node.get_logger().info("------------------------------")
        with open(filepath) as json_data_file:
            data = json.load(json_data_file)
        config = Config(**data)
        self.config = config

        # Construct the annotator
        self.annotator = Inference(self.config)

        self.service = node.create_service(ImageProcessing, 'perform_detection', self.annotateImage)

        self.bridge = CvBridge()
        node.get_logger().debug("FCN8 Detection service is available")

    def annotateImage(self, req, response):
        """
        Callback function for ImageProcessing Service. Return image is the
        same size as the input image
        """
        node.get_logger().debug("Annotating image using FCN8")

        # Convert sensor_msgs/Image to cv2 Mat
        cv_image = self.bridge.imgmsg_to_cv2(req.input_image, "8UC3")
        cv_image = np.asarray(cv_image[:,:,:])

        # Convert to numpy array and send to annotator
        input_image = np.asarray(cv_image)

        # Generate the annotation and convert to 3 channel image
        res = self.annotator.make_prediction(input_image[:,:,0])

        results_image = cv.merge((res, res, res)) * 255

        # Invert the image
        if self.invert_results:
          results_image = 255 - results_image

        # Convert results back into sensor_msgs/Image
        res_msg = self.bridge.cv2_to_imgmsg(results_image, "8UC3")
        response.returned_image = res_msg

        node.get_logger().debug("Annotation Complete")
        return response


if __name__ == '__main__':    
    rclpy.init()
    print("Node created")
    node = rclpy.create_node('fcn8_node')
    node.declare_parameter('disable_gpu', False, ParameterDescriptor(type=ParameterType.PARAMETER_BOOL))
    node.declare_parameter('filepath', '', ParameterDescriptor(type=ParameterType.PARAMETER_STRING))
    node.declare_parameter('invert_results', False, ParameterDescriptor(type=ParameterType.PARAMETER_BOOL))

    # Optionally disable the gpu
    disable_gpu = node.get_parameter('disable_gpu').value
    if disable_gpu:
      os.environ['CUDA_VISIBLE_DEVICES'] = '-1'

    # Filepath to the h5 weights file
    filepath = node.get_parameter('filepath').value
    invert_results = node.get_parameter('invert_results').value

    # Launch server
    server = InferenceServer(node, filepath, invert_results)

    node.get_logger().info("FCN8 Server is active")
    while rclpy.ok():
        rclpy.spin_once(node)
    rclpy.shutdown()
